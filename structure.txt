serverless-hello-world/
├── terraform/
│   ├── main.tf
│   ├── modules/
│   │   ├── lambda/
│   │   │   ├── main.tf
│   │   │   ├── variables.tf
│   │   │   ├── outputs.tf
│   │   ├── api_gateway/
│   │   │   ├── main.tf
│   │   │   ├── variables.tf
│   │   │   ├── outputs.tf
│   │   ├── cognito/
│   │   │   ├── main.tf
│   │   │   ├── variables.tf
│   │   │   ├── outputs.tf
│   ├── variables.tf
│   ├── outputs.tf
│   ├── provider.tf
├── lambda/
│   ├── index.js
│   ├── package.json
├── .github/
│   ├── workflows/
│   │   ├── deploy.yml
├── README.md
```
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
  backend "s3" {
    bucket         = "your-terraform-state-bucket"
    key            = "serverless-app/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-lock"
  }
}

provider "aws" {
  region = "us-east-1"
}

module "lambda" {
  source = "./modules/lambda"
}

module "api_gateway" {
  source = "./modules/api_gateway"
}

module "cognito" {
  source = "./modules/cognito"
}
```

#### **modules/lambda/main.tf**
```hcl
resource "aws_lambda_function" "hello_lambda" {
  function_name = "hello-world-app"
  handler       = "index.handler"
  runtime       = "nodejs18.x"
  role          = aws_iam_role.lambda_role.arn
  filename      = "lambda.zip"
}
```

#### **modules/api_gateway/main.tf**
```hcl
resource "aws_apigatewayv2_api" "hello_api" {
  name          = "HelloAPI"
  protocol_type = "HTTP"
}
```

#### **modules/cognito/main.tf**
```hcl
resource "aws_cognito_user_pool" "user_pool" {
  name = "hello-world-user-pool"
}
```

### Lambda Function (Node.js)
#### **index.js**
```javascript
exports.handler = async (event) => {
    return {
        statusCode: 200,
        headers: { "Content-Type": "text/html" },
        body: "<h1>Hello, World!</h1>"
    };
};
```

#### **package.json**
```json
{
  "name": "hello-world",
  "version": "1.0.0",
  "description": "A simple AWS Lambda function",
  "dependencies": {}
}
```

### GitHub Actions Workflow
#### **deploy.yml**
```yaml
name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Apply Terraform changes
        run: terraform apply -auto-approve
```

### README.md
```markdown
# Serverless "Hello, World!" Web App

## Architecture Diagram
![Architecture](architecture.png)

## CI/CD Pipeline
- GitHub Actions triggers Terraform deployment.
- AWS Lambda hosts the backend function.
- API Gateway exposes the function.
- Cognito handles authentication.

## How to Deploy
1. Clone the repository.
2. Set up AWS credentials in GitHub Secrets.
3. Push changes to `main` to trigger deployment.

## Testing
- Open the API Gateway URL in a browser.
- Log in using Cognito SSO.
- If successful, "Hello, World!" appears.
```


